{"version":3,"sources":["assets/scrum.svg","serviceWorker.js","Navbar.js","Footer.js","firebaseApp.js","Modal.js","RowTasks.js","AcceptanceCriteria.js","Rows.js","Goals.js","Stories.js","Sprints.js","Releases.js","DOR.js","Standup.js","DOD.js","Table.js","Countdown.js","SharedUsers.js","Project.js","ProjectList.js","index.js","assets/standup.gif","assets/logo.svg","assets/scrum1.png","assets/scrum2.png","assets/scrum3.png","assets/scrum4.png","assets/scrum5.png","assets/scrum6.png","assets/scrum7.png","assets/scrum8.png"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","props","state","collapse","onClick","bind","this","setState","className","dark","expand","scrolling","fixed","href","src","logo","alt","isOpen","navbar","right","user","to","style","margin","displayName","size","color","signOut","signUp","React","Component","Footer","id","fluid","md","Date","getFullYear","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Modal","modal","toggle","centered","scrollable","title","modal_message","type","name","input_name","value","input_value","label","input_label","onChange","handleInput","background","outline","second_input","input_name2","input_value2","input_label2","status","handleEdit","edit_id","button_title","e","handleSubmit","RowTasks","onDragStart","ev","console","log","dataTransfer","setData","removeTask","itemId","firebaseApp","database","ref","remove","nextTodo","update","category","owner","nextDone","storyTasks","tasks","forEach","t","storyID","push","Fragment","map","task","key","taskName","draggable","taskPoints","idd","confirm","AcceptanceCriteria","event","target","preventDefault","acceptanceCriteria","length","newItem","acceptanceCriterias","on","snapshot","acceptanceList","val","newState","acceptance","a","removeAcceptanceCriteria","Rows","toggleAndSet","selectedStory","edit_toggle","edit_modal","exists","now","onDragOver","onDrop","cat","getData","filter","taskList","renTasks","todo","inprogress","done","haskTasks","userstories","s","userstory","number","removeStory","storyName","storyPoints","Goals","goalName","projectID","goals","goalList","goal","g","removeGoal","Stories","sprintID","stories","story","projectStory","i","Sprints","selectedGoal","dueDate","selectGoal","deselectGoal","releaseID","selectSprint","selectedSprint","closeSprint","sprints","sprintsList","sprint","takenGoals","found","find","element","removeSprint","Releases","releaseV","selectRelease","selectedRelease","closeRelease","releases","releasesList","release","r","removeRelease","DOR","definition","definitions","definitionList","d","updateDOR","removeDOR","Standup","resetTimer","getTime","standupdate","days","hours","minutes","seconds","countDownDate","countDownDateID","standups","standup","interval","setInterval","distance","daysN","Math","floor","hoursN","minutesN","secondsN","clearInterval","countDownTimer","stand","endTimer","DOD","updateDOD","removeDOD","Table","input","projectName","project","toggler","getValue","CountDown","SharedUsers","sharedUsers","sharedUsersList","sharedUser","u","removeSharedUser","Project","shareModal","proj","selectedProject","openProject","showResults","toggledProject","closeProject","open","users","projects","sharedProjects","p","userID","auth","currentUser","uid","email","updateProject","removeProject","Countdown","ProjectList","projtoggle","projectToggled","signInWithGoogle","loading","uiConfig","firebaseAuth","scrum1","scrum2","scrum3","scrum4","scrum5","scrum6","scrum7","scrum8","firebaseAppAuth","providers","googleProvider","GoogleAuthProvider","signInSuccessUrl","signInOptions","PROVIDER_ID","onAuthStateChanged","withFirebaseAuth","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d04faed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scrum.d00c6aa1.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { MDBContainer, MDBBtn, MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon } from 'mdbreact';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport logo from './assets/logo.svg';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          collapse: false,\n      };\n      this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.setState({\n        collapse: !this.state.collapse,\n      });\n  }\n\n  render() {\n    return(\n      <div>\n        <Router>\n          <header>\n            <MDBNavbar className=\"navbar\" dark expand=\"md\" scrolling fixed=\"top\">\n              <MDBNavbarBrand href=\"/\">\n                  <img src={logo} className=\"contain\" alt=\"\" /><strong>(Beta)</strong>\n              </MDBNavbarBrand>\n              <MDBNavbarToggler onClick={ this.onClick } />\n              <MDBCollapse isOpen = { this.state.collapse } navbar>\n                <MDBNavbarNav right>\n                  <MDBNavItem>\n                    {\n                      this.props.user\n                        ? <MDBNavLink to=\"#\" style={{margin:5}}>Hello, {this.props.user.displayName}</MDBNavLink>\n                        : <MDBNavLink to=\"#\"></MDBNavLink>\n                    }             \n                  </MDBNavItem>\n                  <MDBNavItem>\n                    {\n                      this.props.user\n                        ? <MDBBtn size=\"md\" color=\"danger\" onClick={this.props.signOut}>Sign out</MDBBtn>\n                        : this.props.signUp //<MDBBtn size=\"md\" onClick={this.props.signInWithGoogle}>Log in</MDBBtn>\n                    }\n                  </MDBNavItem>\n                </MDBNavbarNav>\n              </MDBCollapse>\n            </MDBNavbar>\n          </header>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;","import React from \"react\";\nimport './index.css';\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\n\nconst Footer = () => {\n  return (\n    <MDBFooter id=\"footer\" className=\"font-small pt-4\">\n      <MDBContainer fluid className=\"text-center text-md-left\">\n        <MDBRow>\n          <MDBCol md=\"12\"><div className=\"break\"></div></MDBCol>\n          <MDBCol md=\"3\" className=\"footsvg\"></MDBCol>\n          <MDBCol md=\"4\" className=\"footerDesc\">\n            <h5 className=\"footertitle\">The Scrum Methodolgy</h5>\n            <p>\n              Here you can learn to use Scrum principles to manage and organize any project.\n            </p>\n          </MDBCol>\n          <MDBCol md=\"3\" className=\"footerDesc\">\n            <h5 className=\"footertitle\">Recommended Readings</h5>\n            <ul>\n              <li className=\"list-unstyled underline-hover\">\n                <a href=\"https://www.goodreads.com/book/show/19288230-scrum\">Art of Scrum</a>\n              </li>\n              <li className=\"list-unstyled underline-hover\">\n                <a href=\"https://www.goodreads.com/book/show/13663747-essential-scrum?from_search=true&qid=p13qc7Q1NI&rank=1\">Essential Scrum</a>\n              </li>\n              <li className=\"list-unstyled underline-hover\">\n                <a href=\"https://www.goodreads.com/book/show/18165261-scrum-mastery?ac=1&from_search=true&qid=LXTySB4B00&rank=1\">Scrum Mastery</a>\n              </li>\n              <li className=\"list-unstyled underline-hover\">\n                <a href=\"https://www.goodreads.com/book/show/7181943-scrum-product-ownership----balancing-value-from-the-inside-out\">Scrum Product Ownership</a>\n              </li>\n            </ul>\n          </MDBCol>\n          <MDBCol md=\"2\" className=\"footsvg2\"></MDBCol>\n        </MDBRow>\n      </MDBContainer>\n      <div className=\"footer-copyright text-center py-3\">\n        <MDBContainer fluid>\n          &copy; {new Date().getFullYear()} Copyright: <a className=\"underline-hover\" href=\"https://www.shayanshaikh.com\"> Shayan Shaikh </a>\n        </MDBContainer>\n      </div>\n    </MDBFooter>\n  );\n}\n\nexport default Footer;","import firebase from 'firebase'\nconst config = {\n    apiKey: \"AIzaSyAGHNNPXxTDAgG6wpL5TxlFVcBV8X6T8dg\",\n    authDomain: \"scrum-board-b1d2f.firebaseapp.com\",\n    databaseURL: \"https://scrum-board-b1d2f.firebaseio.com\",\n    projectId: \"scrum-board-b1d2f\",\n    storageBucket: \"scrum-board-b1d2f.appspot.com\",\n    messagingSenderId: \"207954476199\",\n    appId: \"1:207954476199:web:91f8de16331dbae3646f82\",\n    measurementId: \"G-VW9VT4MR03\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from 'react';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\n\nclass Modal extends React.Component {\n   constructor(props) {\n     super(props)\n   }\n  \n  render() {\n  return ( \n    <MDBModal isOpen={this.props.modal} toggle={this.props.toggle} centered scrollable>\n      <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\n      <MDBModalBody>\n        {this.props.modal_message}\n        <MDBInput type=\"text\" name={this.props.input_name} value={this.props.input_value} label={this.props.input_label} onChange={this.props.handleInput} background outline/>\n        {this.props.second_input == true ? <MDBInput type=\"text\" name={this.props.input_name2} value={this.props.input_value2} label={this.props.input_label2} onChange={this.props.handleInput} background outline/> : null }\n      </MDBModalBody>\n      <MDBModalFooter>\n        <MDBBtn color=\"secondary\" onClick={this.props.toggle}>Close</MDBBtn>\n        {this.props.status == \"edit\" ?\n        <MDBBtn color=\"primary\" onClick=\n                {() => this.props.handleEdit(this.props.edit_id)}>{this.props.button_title}</MDBBtn> :\n        <MDBBtn color=\"primary\" onClick={(e) => this.props.handleSubmit(e)}>{this.props.button_title}</MDBBtn> }\n      </MDBModalFooter>\n    </MDBModal>\n    );\n  }\n}\n\nexport default Modal;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Modal from './Modal';\n\nclass RowTasks extends React.Component {\n  onDragStart = (ev, id) => {\n    console.log('dragstart:',id);\n    ev.dataTransfer.setData(\"id\", id);\n  }\n\n  removeTask = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/tasks/${itemId}`);\n    itemRef.remove();\n  }\n\n  nextTodo = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/tasks/${itemId}`);\n    itemRef.update({\n      category:\"inprogress\",\n      owner: this.props.user.displayName\n    });\n  }\n\n  nextDone = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/tasks/${itemId}`);\n    itemRef.update({\n      category:\"done\",\n      owner: this.props.user.displayName\n    });\n  }\n\n  render () {\n    var storyTasks = []\n    this.props.tasks.forEach( (t)=> {\n      if (t.storyID === this.props.storyID) {\n        storyTasks.push(t);\n      }\n    });\n    return (\n    <React.Fragment>\n      {storyTasks.map(task => (\n        <MDBCard className=\"task\" key={task.id} onDragStart = {(e) => this.onDragStart(e, task.taskName)} draggable>\n        <MDBCardBody>\n        <div className=\"taskDesc\">\n          {task.taskName}<br/>ETC: {task.taskPoints}<br/>Owner: {task.owner}\n          <MDBBtn className=\"editTask task\" color=\"indigo\" size=\"sm\" onClick={()=>{this.props.update(task.idd)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n          <MDBBtn className=\"deleteTask task\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeTask(task.idd)} }>×</MDBBtn>\n          { task.category === \"todo\" ? <MDBBtn className=\"nextButton task\" color=\"primary\" size=\"sm\" onClick={() => this.nextTodo(task.idd)}><i className=\"fas fa-chevron-right\"></i></MDBBtn> : null }\n          { task.category === \"inprogress\" ? <MDBBtn className=\"nextButton task\" color=\"primary\" size=\"sm\" onClick={() => this.nextDone(task.idd)}><i className=\"fas fa-chevron-right\"></i></MDBBtn> : null }\n        </div>\n        </MDBCardBody>\n        </MDBCard>\n      ))}\n      <Modal\n        title=\"Editing Task\"\n        button_title=\"Update\"\n        input_name=\"taskName\"\n        input_name2=\"taskPoints\"\n        input_label=\"Task\"\n        input_label2=\"Time Estimate\"\n        handleInput={this.props.handleInput}\n        input_value={this.props.input_value}\n        input_value2={this.props.input_value2}\n        toggle={this.props.toggle}\n        modal={this.props.modal}\n        handleEdit={this.props.handleEdit}\n        second_input={true}\n        status=\"edit\"\n        edit_id={this.props.edit_id}\n      />\n    </React.Fragment>\n    );\n  }\n}\n\nexport default RowTasks;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\n\nclass AcceptanceCriteria extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      acceptanceCriteria: '',\n      acceptanceCriterias: []\n    }\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.acceptanceCriteria.length) {\n      return;\n    }\n    const newItem = {\n      acceptanceCriteria: this.state.acceptanceCriteria,\n      storyID: this.props.storyID\n    };\n\n    const acceptanceRef = firebaseApp.database().ref('acceptanceCriteria');\n    acceptanceRef.push(newItem);\n\n    this.setState(state => ({\n      acceptanceCriteria: ''\n    }));\n  }\n\n  componentDidMount() {\n    const acceptanceRef = firebaseApp.database().ref('acceptanceCriteria');\n    acceptanceRef.on('value', (snapshot) => {\n      let acceptanceList = snapshot.val();\n      let newState = [];\n      for (let acceptance in acceptanceList) {\n        newState.push({\n          id: acceptance,\n          acceptanceCriteria: acceptanceList[acceptance].acceptanceCriteria,\n          storyID: acceptanceList[acceptance].storyID\n        });\n      }\n      this.setState({\n        acceptanceCriterias: newState\n      });\n    });\n  }\n\n  removeAcceptanceCriteria(itemId) {\n    const itemRef = firebaseApp.database().ref(`/acceptanceCriteria/${itemId}`);\n    itemRef.remove();\n  }\n\n\n  render () {\n    var acceptanceCriterias = [];\n    this.state.acceptanceCriterias.forEach ((a) => {\n      if (this.props.storyID === a.storyID) {\n        acceptanceCriterias.push(a);\n      }\n    });\n\n    return (\n    <React.Fragment>\n      { acceptanceCriterias.length === 0 ? <div className=\"emptyTitleM\">Looks like you have no acceptance criteria try creating a new one.</div> : <span style={{color:\"black\"}}>Did you meet the</span> }\n      <MDBBtn color=\"primary\" size=\"sm\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> Acceptance Criteria</MDBBtn>\n      <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered scrollable>\n        <MDBModalHeader toggle={this.toggle}>Enter New Acceptance Criteria</MDBModalHeader>\n        <MDBModalBody>\n          Here is where you will define the specific criteria that makes this user story ready to be delivered. \n          <MDBInput type=\"text\" name=\"acceptanceCriteria\" label=\"Acceptance Criteria\" onChange={this.handleInput} background outline/>\n          {acceptanceCriterias.map(acceptance => (\n            <MDBCard key={acceptance.id} className=\"card\">\n            <MDBCardBody>\n            <MDBCardText>{acceptance.acceptanceCriteria} <MDBBtn className=\"deleteTask\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeAcceptanceCriteria(acceptance.id)} }>×</MDBBtn></MDBCardText>\n            </MDBCardBody>\n            </MDBCard>\n          ))}\n        </MDBModalBody>\n        <MDBModalFooter>\n          <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n          <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Submit</MDBBtn>\n        </MDBModalFooter>\n      </MDBModal>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default AcceptanceCriteria;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport RowTasks from './RowTasks';\nimport AcceptanceCriteria from './AcceptanceCriteria';\nimport firebaseApp from './firebaseApp';\nimport Modal from './Modal';\n\nclass Rows extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      taskName: '',\n      taskPoints: '',\n      tasks: [],\n      selectedStory: '',\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  toggleAndSet = (name) => {\n    this.setState({\n      modal: !this.state.modal,\n      selectedStory: name\n    });\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      taskName: '',\n      taskPoints: ''\n    });\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.taskName.length || !this.state.taskPoints.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/tasks/${itemId}`);\n    itemRef.update({taskName: this.state.taskName, taskPoints: this.state.taskPoints});\n\n    this.edit_toggle();\n  }\n\n  update = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/tasks/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      if (snapshot && snapshot.exists()) {\n        let task = snapshot.val();\n        this.setState({\n          taskName: task.taskName,\n          taskPoints: task.taskPoints,\n          edit_id: itemId,\n          edit_modal: !this.state.edit_modal\n        });\n      }\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.taskName.length || !this.state.taskPoints.length) {\n      return;\n    }\n    const newItem = {\n      taskName: this.state.taskName,\n      taskPoints: this.state.taskPoints,\n      id: Date.now(),\n      category: \"todo\",\n      storyID: this.state.selectedStory,\n      owner: this.props.user.displayName\n    };\n\n    const tasksRef = firebaseApp.database().ref('tasks');\n    tasksRef.push(newItem);\n\n    this.setState(state => ({\n      taskName: '',\n      taskPoints: ''\n    }));\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const tasksRef = firebaseApp.database().ref('tasks');\n    tasksRef.on('value', (snapshot) => {\n      let taskList = snapshot.val();\n      let newState = [];\n      for (let task in taskList) {\n        newState.push({\n          idd: task,\n          id: taskList[task].id,\n          category: taskList[task].category,\n          taskPoints: taskList[task].taskPoints,\n          taskName: taskList[task].taskName,\n          storyID: taskList[task].storyID,\n          owner: taskList[task].owner\n        });\n      }\n      this.setState({\n        tasks: newState\n      });\n    });\n  }\n\n  onDragStart = (ev, id) => {\n      console.log('dragstart1:',id);\n      ev.dataTransfer.setData(\"id\", id);\n  }\n\n  onDragOver = (ev) => {\n      ev.preventDefault();\n  }\n\n  onDrop = (ev, cat) => {\n     let id = ev.dataTransfer.getData(\"id\");\n\n     let tasks = this.state.tasks.filter((task) => {\n         if (task.taskName === id) {\n          const itemRef = firebaseApp.database().ref(`/tasks/${task.idd}`);\n          itemRef.update({\n            category: cat,\n            owner: this.props.user.displayName\n          });\n          task.category = cat;\n         }\n         return task;\n     });\n  }\n\n  removeStory(itemId) {\n    const itemRef = firebaseApp.database().ref(`/userstories/${itemId}`);\n    itemRef.remove();\n  }\n\n  render () {\n    var renTasks = {\n      todo: [],\n      inprogress: [],\n      done: []\n    }\n    var haskTasks = false;\n\n    this.state.tasks.forEach ((t) => {\n      renTasks[t.category].push(t);\n    });\n\n    this.props.userstories.forEach( (s)=> {\n      this.state.tasks.forEach( (t)=> {\n        if (t.storyID === s.id) {\n          haskTasks = true;\n        }\n      });\n    });\n\n\n    return (\n    <React.Fragment>\n      <div className=\"scrumBoard\">\n      { this.props.userstories.length === 0 ? <h3 className=\"emptyTitle\">Looks like you have no userstories try creating a new one.</h3> : null }\n\t\t  {this.props.userstories.map(userstory => (\n      <MDBRow className=\"border border-dark\" key={userstory.id}>\n      <MDBCol md=\"3\" className=\"border border-dark\">\n      <h5 className=\"colHeader\">\n      User Story {userstory.number}: \n      <MDBBtn className=\"editTask\" color=\"indigo\" size=\"sm\" onClick={()=>{this.props.update(userstory.id)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n      <MDBBtn className=\"deleteTask\" size=\"sm\" color=\"danger\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeStory(userstory.id)} }>×</MDBBtn>\n      </h5>\n\t\t  <MDBCard className=\"task\"><MDBCardBody>\n      <div className=\"userstory\">{userstory.storyName}</div>\n      <div className=\"storyPoints\">Story Points: {userstory.storyPoints}</div>\n      </MDBCardBody></MDBCard>\n      <AcceptanceCriteria storyID={userstory.id}/>\n      </MDBCol>\n      <MDBCol className=\"border border-dark\" md=\"3\" onDragOver={(e)=>this.onDragOver(e)} onDrop={(e)=>this.onDrop(e, \"todo\")}>\n\t\t  <h5 className=\"colHeader\">To Do: <MDBBtn color=\"primary\" onClick={() => this.toggleAndSet(userstory.id)} className=\"taskButton hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New Task</MDBBtn></h5>\n      <br/>\n      { haskTasks ? null : <h3 className=\"emptyTitleM\">Looks like you have no tasks yet try creating a new one.</h3>}\n      <RowTasks \n        user={this.props.user}\n        tasks={renTasks.todo} \n        storyID={userstory.id}\n        handleInput={this.handleInput}\n        input_value={this.state.taskName}\n        input_value2={this.state.taskPoints}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        edit_id={this.state.edit_id}\n        update={this.update}\n      />\n\t\t  </MDBCol>\n      <MDBCol className=\"border border-dark\" md=\"3\" onDragOver={(e)=>this.onDragOver(e)} onDrop={(e)=>this.onDrop(e, \"inprogress\")}>\n      <h5 className=\"colHeader\">In Progress:</h5>\n      <RowTasks \n        user={this.props.user}\n        tasks={renTasks.inprogress} \n        storyID={userstory.id}\n        handleInput={this.handleInput}\n        input_value={this.state.taskName}\n        input_value2={this.state.taskPoints}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        edit_id={this.state.edit_id}\n        update={this.update}\n      />\n\t\t  </MDBCol>\n      <MDBCol className=\"border border-dark\" md=\"3\" onDragOver={(e)=>this.onDragOver(e)} onDrop={(e)=>this.onDrop(e, \"done\")}>\n      <h5 className=\"colHeader\">Done:</h5>\n      <RowTasks \n        user={this.props.user}\n        tasks={renTasks.done} \n        storyID={userstory.id}\n        handleInput={this.handleInput}\n        input_value={this.state.taskName}\n        input_value2={this.state.taskPoints}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        edit_id={this.state.edit_id}\n        update={this.update}\n      />\n\t\t  </MDBCol>\n      </MDBRow>\n\t\t  ))}\n      </div>\n      <Modal\n        title=\"Editing User Story\"\n        button_title=\"Update\"\n        input_name=\"storyName\"\n        input_name2=\"storyPoints\"\n        input_label=\"As a {user role} I want to...\"\n        input_label2=\"Story Points\"\n        handleInput={this.props.handleInput}\n        input_value={this.props.input_value}\n        input_value2={this.props.input_value2}\n        toggle={this.props.toggle}\n        modal={this.props.modal}\n        handleEdit={this.props.handleEdit}\n        second_input={true}\n        status=\"edit\"\n        edit_id={this.props.edit_id}\n      />\n      <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered>\n        <MDBModalHeader toggle={this.toggle}>Create a New Task</MDBModalHeader>\n        <MDBModalBody>\n          Describe a task that will help you achieve your user story. Then give a time estimate (make sure to play planning poker).\n          <MDBInput type=\"text\" name=\"taskName\" label=\"Task\" onChange={this.handleInput} background outline/>\n          <MDBInput type=\"text\" name=\"taskPoints\" label=\"Time Estimate\" onChange={this.handleInput} background outline/>\n        </MDBModalBody>\n        <MDBModalFooter>\n          <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n          <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Submit</MDBBtn>\n        </MDBModalFooter>\n      </MDBModal>\n\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default Rows;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Modal from './Modal';\n\nclass Goals extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      goalName: '',\n      goals: [],\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      goalName: ''\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.goalName.length) {\n      return;\n    }\n    const newItem = {\n      goalName: this.state.goalName,\n      projectID: this.props.projectID\n    };\n\n    const goalsRef = firebaseApp.database().ref('goals');\n    goalsRef.push(newItem);\n\n    this.setState(state => ({\n      goalName: '',\n    }));\n    this.toggle();\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.goalName.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/goals/${itemId}`);\n    itemRef.update({goalName: this.state.goalName});\n\n    this.edit_toggle();\n  }\n\n  componentDidMount() {\n    const goalsRef = firebaseApp.database().ref('goals');\n    goalsRef.on('value', (snapshot) => {\n      let goalList = snapshot.val();\n      let newState = [];\n      for (let goal in goalList) {\n        newState.push({\n          id: goal,\n          goalName: goalList[goal].goalName,\n          projectID: goalList[goal].projectID\n        });\n      }\n      this.setState({\n        goals: newState\n      });\n    });\n  }\n\n  removeGoal(itemId) {\n    const itemRef = firebaseApp.database().ref(`/goals/${itemId}`);\n    itemRef.remove();\n  }\n\n  update(itemId) {\n    const itemRef = firebaseApp.database().ref(`/goals/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      if (snapshot && snapshot.exists()) {\n        let goal = snapshot.val();\n        this.setState({\n          goalName: goal.goalName,\n          edit_id: itemId,\n          edit_modal: !this.state.edit_modal\n        });\n      }\n    });\n  }\n\n\n  render () {\n    var goals = [];\n    this.state.goals.forEach ((g) => {\n      if (this.props.projectID === g.projectID) {\n        goals.push(g);\n      }\n    });\n\n    return (\n    <React.Fragment>\n      <MDBContainer>\n      <MDBCard>\n      <MDBCardBody>\n      <MDBCardTitle>High Level Goals</MDBCardTitle>\n      <MDBBtn color=\"primary\" size=\"sm\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New HLG</MDBBtn>\n      { goals.length === 0 ? <div className=\"emptyTitleM\">Looks like you have no high level goals try creating a new one.</div> : null }\n      {goals.map(goal => (\n        <MDBCard key={goal.id} className=\"card\">\n        <MDBCardBody>\n        {goal.goalName} \n        <MDBBtn className=\"editTask\" color=\"indigo\" size=\"sm\" onClick={()=>{this.update(goal.id)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n        <MDBBtn className=\"deleteTask\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeGoal(goal.id)} }>×</MDBBtn>\n        </MDBCardBody>\n        </MDBCard>\n\t\t  ))}\n      </MDBCardBody>\n      </MDBCard>\n      </MDBContainer>\n      <Modal\n        title=\"Enter New Goal\"\n        button_title=\"Submit\"\n        modal_message=\"Here is where you will add goals you want your project to fufill and later we will use a goal as guidance for our sprint.\"\n        input_name=\"goalName\"\n        input_label=\"High Level Goal\"\n        handleInput={this.handleInput}\n        input_value={this.state.goalName}\n        toggle={this.toggle}\n        modal={this.state.modal}\n        handleSubmit={this.handleSubmit}\n      />\n      <Modal\n        title=\"Editing Goal\"\n        button_title=\"Update\"\n        input_name=\"goalName\"\n        input_label=\"High Level Goal\"\n        handleInput={this.handleInput}\n        input_value={this.state.goalName}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        status=\"edit\"\n        edit_id={this.state.edit_id}\n      />\n\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default Goals;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Rows from './Rows';\n\nclass Stories extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      storyName: '',\n      storyPoints: '',\n      userstories: [],\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      storyName: '',\n      storyPoints: ''\n    });\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.storyName.length || !this.state.storyPoints.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/userstories/${itemId}`);\n    itemRef.update({storyName: this.state.storyName, storyPoints: this.state.storyPoints});\n\n    this.edit_toggle();\n  }\n\n  update = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/userstories/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n    \tif (snapshot && snapshot.exists()) {\n\t      let task = snapshot.val();\n\t      this.setState({\n\t        storyName: task.storyName,\n\t        storyPoints: task.storyPoints,\n\t        edit_id: itemId,\n\t        edit_modal: !this.state.edit_modal\n\t      });\n\t  \t}\n    });\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.storyName.length || !this.state.storyPoints.length) {\n      return;\n    }\n    const newItem = {\n      storyName: this.state.storyName,\n      storyPoints: this.state.storyPoints,\n      sprintID: this.props.sprintID,\n    };\n\n    const storiesRef = firebaseApp.database().ref('userstories');\n    storiesRef.push(newItem);\n\n    this.setState(state => ({\n      storyName: '',\n      storyPoints: '',\n    }));\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const storiesRef = firebaseApp.database().ref('userstories');\n    storiesRef.on('value', (snapshot) => {\n      let stories = snapshot.val();\n      let newState = [];\n      for (let story in stories) {\n        newState.push({\n          id: story,\n          sprintID: stories[story].sprintID,\n          storyPoints: stories[story].storyPoints,\n          storyName: stories[story].storyName\n        });\n      }\n      this.setState({\n        userstories: newState\n      });\n    });\n  }\n\n  render () {\n    var projectStory = [];\n    var i = 1;\n    this.state.userstories.forEach( (s)=> {\n      if (s.sprintID === this.props.sprintID) {\n        const newItem = {\n          id: s.id,\n          sprintID: s.sprintID,\n          storyPoints: s.storyPoints,\n          storyName: s.storyName,\n          number: i\n        };\n        projectStory.push(newItem);\n        i = i + 1;\n      }\n    });\n\n    return (\n      <React.Fragment>\n      <h4 className=\"w-75 text-center\"><MDBBtn color=\"primary\" size=\"sm\" id=\"projectbtn\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New User Story</MDBBtn></h4>\n      <Rows \n      \tuser={this.props.user}\n      \tuserstories={projectStory} \n      \tupdate={this.update}\n      \thandleInput={this.handleInput}\n        input_value={this.state.storyName}\n        input_value2={this.state.storyPoints}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        edit_id={this.state.edit_id}\n      />\n      <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered>\n        <MDBModalHeader toggle={this.toggle}>Create a New User Story</MDBModalHeader>\n        <MDBModalBody>\n          Recall that a user story should take the form, <br/><br/><div className=\"text-center\">As a [user role], I want [goal] so that [reason]</div><br/> and should meet the \"INVEST\" criteria (independent, negotiable, valuable, estimatable, sized appropriately, and testable).<br/>Then assess the difficulty of the user story and assign a story point value. \n          <MDBInput type=\"text\" name=\"storyName\" label=\"As a {user role} I want to...\" onChange={this.handleInput} background outline/>\n          <MDBInput type=\"text\" name=\"storyPoints\" label=\"Story Points\" onChange={this.handleInput} background outline/>\n        </MDBModalBody>\n        <MDBModalFooter>\n          <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n          <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Submit</MDBBtn>\n        </MDBModalFooter>\n      </MDBModal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Stories;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Rows from './Rows';\nimport Stories from './Stories';\n\nclass Sprints extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      sprints: [],\n      goals: [],\n      selectedGoal: '',\n      dueDate: '',\n      selectedSprint: '',\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n    \n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      selectedGoal: '',\n      dueDate: ''\n    });\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.selectedGoal.length || !this.state.dueDate.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/sprints/${itemId}`);\n    itemRef.update({goal: this.state.selectedGoal, dueDate: this.state.dueDate});\n\n    this.edit_toggle();\n  }\n\n  update = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/sprints/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      if (snapshot && snapshot.exists()) {\n        let task = snapshot.val();\n        this.setState({\n          selectedGoal: task.goal,\n          dueDate: task.dueDate,\n          edit_id: itemId,\n          edit_modal: !this.state.edit_modal\n        });\n      }\n    });\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal,\n      selectedGoal: ''\n    });\n  }\n\n  selectGoal = (goalName) => {\n    this.setState({\n      selectedGoal: goalName\n    });\n  }\n\n  deselectGoal = () => {\n    this.setState({\n      selectedGoal: ''\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.selectedGoal.length || !this.state.dueDate.length) {\n      return;\n    }\n    const newItem = {\n      releaseID: this.props.releaseID,\n      projectID: this.props.projectID,\n      dueDate: this.state.dueDate,\n      goal: this.state.selectedGoal\n    };\n\n    const sprintsRef = firebaseApp.database().ref('sprints');\n    sprintsRef.push(newItem);\n\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const sprintsRef = firebaseApp.database().ref('sprints');\n    sprintsRef.on('value', (snapshot) => {\n      let sprintsList = snapshot.val();\n      let newState = [];\n      for (let sprint in sprintsList) {\n        newState.push({\n          id: sprint,\n          releaseID: sprintsList[sprint].releaseID,\n          dueDate: sprintsList[sprint].dueDate,\n          projectID: sprintsList[sprint].projectID,\n          goal: sprintsList[sprint].goal\n        });\n      }\n      this.setState({\n        sprints: newState\n      });\n    });\n    const goalsRef = firebaseApp.database().ref('goals');\n    goalsRef.on('value', (snapshot) => {\n      let goalList = snapshot.val();\n      let newState = [];\n      for (let goal in goalList) {\n        newState.push({\n          id: goal,\n          goalName: goalList[goal].goalName,\n          projectID: goalList[goal].projectID\n        });\n      }\n      this.setState({\n        goals: newState\n      });\n    });\n  }\n\n  removeSprint(itemId) {\n    const itemRef = firebaseApp.database().ref(`/sprints/${itemId}`);\n    itemRef.remove();\n  }\n\n  selectSprint = (sprintID) => {\n    this.setState({\n      selectedSprint: sprintID\n    });\n  }\n\n  closeSprint = () => {\n    this.setState({\n      selectedSprint: ''\n    });\n  }\n\n\n  render () {\n    var sprints = [];\n    var takenGoals = [];\n    var i = 1;\n    this.state.sprints.forEach ((s) => {\n      if (this.props.projectID === s.projectID && this.props.releaseID === s.releaseID) {\n        const newItem = {\n          id: s.id,\n          releaseID: s.releaseID,\n          projectID: s.projectID,\n          dueDate: s.dueDate,\n          goal: s.goal,\n          number: i\n        };\n        if (s.goal.length !== 0) {\n          takenGoals.push(s.goal);\n        }\n        sprints.push(newItem);\n        i = i + 1;\n      }\n    });\n    var goals = [];\n    this.state.goals.forEach ((g) => {\n      var found = takenGoals.find(function(element) { \n        return element === g.goalName; \n      });\n      if (this.props.projectID === g.projectID && typeof found === \"undefined\") {\n        goals.push(g);\n      }\n    });\n\n    return (\n      <React.Fragment>\n          <h4 className=\"w-50 text-center\"><MDBBtn color=\"primary\" size=\"sm\" id=\"projectbtn\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New Sprint Plan</MDBBtn></h4>\n          { sprints.length === 0 ? <h3 className=\"emptyTitle\">Looks like you have no sprint plans try creating a new one.</h3> : null }\n          {sprints.map(sprint => ( \n            <React.Fragment key={sprint.id} >     \n            <MDBContainer className=\"w-75\">\n            <MDBCard className=\"card\">\n            <MDBCardBody>\n            <MDBCardTitle>\n            Sprint {sprint.number} \n            <MDBBtn className=\"editTask\" color=\"indigo\" size=\"sm\" onClick={()=>{this.update(sprint.id)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n            <MDBBtn className=\"deleteTask\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeSprint(sprint.id)} }>×</MDBBtn>\n            </MDBCardTitle>\n            Goal: {sprint.goal} <br/>\n            <MDBCardText>\n              Sprint Completion Date: {sprint.dueDate}<br/>\n              {this.state.selectedSprint === sprint.id ? <MDBBtn color=\"warning\" size=\"sm\" onClick={this.closeSprint}>Close</MDBBtn> : <MDBBtn color=\"info\" size=\"sm\" onClick={() => this.selectSprint(sprint.id)}>Open</MDBBtn> }\n            </MDBCardText>\n            </MDBCardBody>\n            </MDBCard>\n            </MDBContainer>\n            {this.state.selectedSprint === sprint.id ? <Stories user={this.props.user} sprintID={this.state.selectedSprint} /> : null}\n            </React.Fragment>\n          ))}\n          <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered>\n            <MDBModalHeader toggle={this.toggle}>Create a New Sprint</MDBModalHeader>\n            <MDBModalBody>\n              Here is where you will pick the goal you want to guide this sprint and set the completion date.\n              { goals.length === 0 ? <h5 className=\"emptyTitle\">Looks like you have no goals try adding some goals first.</h5> : null }\n              {goals.map(goal => (\n                <MDBCard key={goal.id} className=\"card\">\n                <MDBCardBody>\n                <MDBCardText>{goal.goalName} <br/> { goal.goalName === this.state.selectedGoal ? <MDBBtn color=\"success\" size=\"sm\" onClick={this.deselectGoal}><i className=\"fas fa-check\"></i>Selected</MDBBtn> : <MDBBtn color=\"info\" size=\"sm\" onClick={() => this.selectGoal(goal.goalName) }>Select</MDBBtn> }</MDBCardText>\n                </MDBCardBody>\n                </MDBCard>\n              ))}\n              <MDBInput type=\"text\" name=\"dueDate\" label=\"Sprint Completion Date\" onChange={this.handleInput} background outline/>\n            </MDBModalBody>\n            <MDBModalFooter>\n              <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n              <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Save changes</MDBBtn>\n            </MDBModalFooter>\n          </MDBModal>\n          <MDBModal isOpen={this.state.edit_modal} toggle={this.edit_toggle} centered>\n            <MDBModalHeader toggle={this.edit_toggle}>Editing Sprint</MDBModalHeader>\n            <MDBModalBody>\n              { goals.length === 0 ? <h5 className=\"emptyTitle\">Looks like you have no goals try adding some goals first.</h5> : null }\n              {goals.map(goal => (\n                <MDBCard key={goal.id} className=\"card\">\n                <MDBCardBody>\n                <MDBCardText>{goal.goalName} <br/> { goal.goalName === this.state.selectedGoal ? <MDBBtn color=\"success\" size=\"sm\" onClick={this.deselectGoal}><i className=\"fas fa-check\"></i>Selected</MDBBtn> : <MDBBtn color=\"info\" size=\"sm\" onClick={() => this.selectGoal(goal.goalName) }>Select</MDBBtn> }</MDBCardText>\n                </MDBCardBody>\n                </MDBCard>\n              ))}\n              <MDBInput type=\"text\" name=\"dueDate\" value={this.state.dueDate} label=\"Sprint Completion Date\" onChange={this.handleInput} background outline/>\n            </MDBModalBody>\n            <MDBModalFooter>\n              <MDBBtn color=\"secondary\" onClick={this.edit_toggle}>Close</MDBBtn>\n              <MDBBtn color=\"primary\" onClick={()=>this.handleEdit(this.state.edit_id)}>Update</MDBBtn>\n            </MDBModalFooter>\n          </MDBModal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Sprints;\n","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Sprints from './Sprints';\nimport Modal from './Modal';\n\nclass Releases extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      releaseV: '',\n      selectedRelease: '',\n      dueDate: '',\n      releases: [],\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      releaseV: '',\n      dueDate: ''\n    });\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.releaseV.length || !this.state.dueDate.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/releases/${itemId}`);\n    itemRef.update({releaseV: this.state.releaseV, dueDate: this.state.dueDate});\n\n    this.edit_toggle();\n  }\n\n  update = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/releases/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      if (snapshot && snapshot.exists()) {\n        let task = snapshot.val();\n        this.setState({\n          releaseV: task.releaseV,\n          dueDate: task.dueDate,\n          edit_id: itemId,\n          edit_modal: !this.state.edit_modal\n        });\n      }\n    });\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  selectRelease = (releaseID) => {\n    this.setState({\n      selectedRelease: releaseID\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.releaseV.length || !this.state.dueDate.length) {\n      return;\n    }\n    const newItem = {\n      releaseV: this.state.releaseV,\n      dueDate: this.state.dueDate,\n      projectID: this.props.projectID\n    };\n\n    const releasesRef = firebaseApp.database().ref('releases');\n    releasesRef.push(newItem);\n\n    this.setState(state => ({\n      releaseV: '',\n      dueDate: ''\n    }));\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const releasesRef = firebaseApp.database().ref('releases');\n    releasesRef.on('value', (snapshot) => {\n      let releasesList = snapshot.val();\n      let newState = [];\n      for (let release in releasesList) {\n        newState.push({\n          id: release,\n          releaseV: releasesList[release].releaseV,\n          dueDate: releasesList[release].dueDate,\n          projectID: releasesList[release].projectID\n        });\n      }\n      this.setState({\n        releases: newState\n      });\n    });\n  }\n\n  removeRelease(itemId) {\n    const itemRef = firebaseApp.database().ref(`/releases/${itemId}`);\n    itemRef.remove();\n  }\n\n  closeRelease = () => {\n    this.setState({\n      selectedRelease: ''\n    });\n  }\n\n  render () {\n    var releases = [];\n    this.state.releases.forEach ((r) => {\n      if (this.props.projectID === r.projectID) {\n        releases.push(r);\n      }\n    });\n\n    return (\n    <React.Fragment>\n      <MDBContainer>\n      <MDBBtn color=\"primary\" size=\"sm\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New Release Plan</MDBBtn>\n      { releases.length === 0 ? <h3 className=\"emptyTitle\">Looks like you have no release plans try creating a new one.</h3> : null }\n      </MDBContainer>\n      {releases.map(release => (\n        <React.Fragment key={release.id}>\n        <MDBContainer>\n        <MDBCard className=\"card\">\n        <MDBCardBody>\n        <MDBCardTitle>\n        Release V{release.releaseV} \n        <MDBBtn className=\"editTask\" color=\"indigo\" size=\"sm\" onClick={()=>{this.update(release.id)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n        <MDBBtn className=\"deleteTask\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeRelease(release.id)} }>×</MDBBtn>\n        </MDBCardTitle>\n        <MDBCardText>\n          Release Date: {release.dueDate}<br/>\n          {this.state.selectedRelease === release.id ? <MDBBtn color=\"warning\" size=\"sm\" onClick={this.closeRelease}>Close</MDBBtn> : <MDBBtn color=\"info\" size=\"sm\" onClick={() => this.selectRelease(release.id)}>Open</MDBBtn> }\n        </MDBCardText>\n        </MDBCardBody>\n        </MDBCard>\n        </MDBContainer>\n        {this.state.selectedRelease === release.id ? <Sprints user={this.props.user} projectID={this.props.projectID} releaseID={this.state.selectedRelease} userstories={this.props.userstories} /> : null}\n        </React.Fragment>\n      ))}\n      <Modal\n        title=\"Editing Release\"\n        button_title=\"Update\"\n        input_name=\"releaseV\"\n        input_name2=\"dueDate\"\n        input_label=\"Version No.\"\n        input_label2=\"Release Date\"\n        handleInput={this.handleInput}\n        input_value={this.state.releaseV}\n        input_value2={this.state.dueDate}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        second_input={true}\n        status=\"edit\"\n        edit_id={this.state.edit_id}\n      />\n      <Modal\n        title=\"Create a New Release\"\n        button_title=\"Submit\"\n        modal_message=\"To begin planning Sprints enter a release version number and release date.\"\n        input_name=\"releaseV\"\n        input_name2=\"dueDate\"\n        input_label=\"Version No.\"\n        input_label2=\"Release Date\"\n        handleInput={this.handleInput}\n        toggle={this.toggle}\n        modal={this.state.modal}\n        handleSubmit={this.handleSubmit}\n        second_input={true}\n      />\n\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default Releases;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Modal from './Modal'\n\nclass DOR extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      definition: '',\n      definitions: [],\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      definition: ''\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.definition.length) {\n      return;\n    }\n    const newItem = {\n      definition: this.state.definition,\n      projectID: this.props.projectID\n    };\n\n    const definitionsRef = firebaseApp.database().ref('dor');\n    definitionsRef.push(newItem);\n\n    this.setState(state => ({\n      definition: ''\n    }));\n    this.toggle();\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.definition.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/dor/${itemId}`);\n    itemRef.update({definition: this.state.definition});\n\n    this.edit_toggle();\n  }\n\n  componentDidMount() {\n    const definitionsRef = firebaseApp.database().ref('dor');\n    definitionsRef.on('value', (snapshot) => {\n      let definitionList = snapshot.val();\n      let newState = [];\n      for (let definition in definitionList) {\n        newState.push({\n          id: definition,\n          definition: definitionList[definition].definition,\n          projectID: definitionList[definition].projectID\n        });\n      }\n      this.setState({\n        definitions: newState\n      });\n    });\n  }\n\n  removeDOR(itemId) {\n    const itemRef = firebaseApp.database().ref(`/dor/${itemId}`);\n    itemRef.remove();\n  }\n\n  updateDOR(itemId) {\n    const itemRef = firebaseApp.database().ref(`/dor/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      if (snapshot && snapshot.exists()) {\n        let definition = snapshot.val();\n        this.setState({\n          definition: definition.definition,\n          edit_id: itemId,\n          edit_modal: !this.state.edit_modal\n        });\n      }\n    });\n  }\n\n  render () {\n    var definitions = [];\n    this.state.definitions.forEach ((d) => {\n      if (this.props.projectID === d.projectID) {\n        definitions.push(d);\n      }\n    });\n\n    return (\n    <React.Fragment>\n      <MDBContainer>\n      <MDBCard className=\"card\">\n      <MDBCardBody>\n      <MDBCardTitle>Definitions of Ready</MDBCardTitle>\n      <MDBBtn color=\"primary\" size=\"sm\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New DOR</MDBBtn>\n      { definitions.length === 0 ? <div className=\"emptyTitleM\">Looks like you have no definitions of ready try creating a new one.</div> : null }\n      {definitions.map(definition => (\n        <MDBCard key={definition.id} className=\"card\">\n        <MDBCardBody>\n        {definition.definition} \n        <MDBBtn className=\"editTask\" color=\"indigo\" size=\"sm\" onClick={()=>{this.updateDOR(definition.id)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n        <MDBBtn className=\"deleteTask\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeDOR(definition.id)} }>×</MDBBtn>\n        </MDBCardBody>\n        </MDBCard>\n\t\t  ))}\n      </MDBCardBody>\n      </MDBCard>\n      </MDBContainer>\n      <Modal\n        title=\"Enter New Definition of Ready\"\n        button_title=\"Submit\"\n        modal_message=\"Here is where you will define the criteria that a user story must pass before it is ready to be put into production.\"\n        input_name=\"definition\"\n        input_label=\"Definition of Ready\"\n        handleInput={this.handleInput}\n        input_value={this.state.definition}\n        toggle={this.toggle}\n        modal={this.state.modal}\n        handleSubmit={this.handleSubmit}\n      />\n      <Modal\n        title=\"Editing Definition of Ready\"\n        button_title=\"Update\"\n        input_name=\"definition\"\n        input_label=\"Definition of Ready\"\n        handleInput={this.handleInput}\n        input_value={this.state.definition}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        status=\"edit\"\n        edit_id={this.state.edit_id}\n      />\n\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default DOR;","import React from \"react\";\nimport './index.css';\nimport stand from './assets/standup.gif';\nimport { MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBCol, MDBContainer, MDBRow, MDBFooter, MDBBtn } from \"mdbreact\";\nimport firebaseApp from './firebaseApp';\n\nclass Standup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      days: null,\n      hours: null,\n      minutes: null,\n      seconds: null,\n      countDownDate: null,\n      countDownDateID: null\n    };\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  resetTimer = (itemId) => {\n    const itemRef = firebaseApp.database().ref(`/standupdates/${itemId}`);\n    itemRef.update({\n      \"standupdate\":new Date().getTime()\n    });\n  }\n\n  endTimer(itemId) {\n    const itemRef = firebaseApp.database().ref(`/standupdates/${itemId}`);\n    itemRef.remove();\n    this.setState({\n      countDownDate: null,\n      countDownDateID: null\n    });\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newItem = {\n      standupdate: new Date().getTime(),\n      projectID: this.props.projectID\n    };\n\n    const standupsRef = firebaseApp.database().ref('standupdates');\n    standupsRef.push(newItem);\n\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const standupsRef = firebaseApp.database().ref('standupdates');\n    standupsRef.on('value', (snapshot) => {\n      let standups = snapshot.val();\n      for (let standup in standups) {\n        if (standups[standup].projectID === this.props.projectID) {\n          this.setState({\n            countDownDate: standups[standup].standupdate,\n            countDownDateID: standup\n          });\n        }\n      }\n    });\n    this.interval = setInterval(() => {\n      var now = new Date().getTime();   \n      // Find the distance between now and the count down date\n      var distance = now-this.state.countDownDate; \n      // Time calculations for days, hours, minutes and seconds\n      var daysN = Math.floor(distance / (1000 * 60 * 60 * 24));\n      var hoursN = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      var minutesN = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      var secondsN = Math.floor((distance % (1000 * 60)) / 1000);\n\n      this.setState({\n        days: daysN,\n        hours: hoursN,\n        minutes: minutesN,\n        seconds: secondsN\n      });\n    }, 1000);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  \n  render() {\n    if (this.state.countDownDate) {\n      var countDownTimer = <div><h4>Time since last stand up meeting: </h4><h5 className=\"standtimer\"><img src={stand} className=\"standgif2\" />{this.state.days}Days {this.state.hours}Hrs {this.state.minutes}Mns<img src={stand} className=\"standgif\" /></h5><MDBBtn color=\"deep-purple\" size=\"md\" onClick={() => { if (window.confirm(\"Did you really meet with your entire group? Did everyone really answer the 3 required questions?\")) this.resetTimer(this.state.countDownDateID)} }>Reset Stand Up Timer</MDBBtn><MDBBtn color=\"danger\" size=\"md\" onClick={() => this.endTimer(this.state.countDownDateID)}>Stop Stand Up Timer</MDBBtn></div>;\n    } else {\n      var countDownTimer = <div><img src={stand} className=\"standgif\" /><MDBBtn color=\"deep-purple\" onClick={this.toggle}>Did you have your first Stand-up meeting?</MDBBtn><img src={stand} className=\"standgif2\" /></div>;\n    }\n    return (\n      <React.Fragment>\n      <div className=\"text-center\">\n        {countDownTimer}\n      </div>\n        <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered>\n          <MDBModalHeader toggle={this.toggle}>Has your team completed their first stand-up meeting?</MDBModalHeader>\n          <MDBModalBody>\n            A stand-up meeting should include each member answering these three questions:<br/><br/>\n            1) What did you accomplish since the last meeting?<br/><br/>\n            2) What are you working on until the next meeting?<br/><br/>\n            3) What is getting in your way or keeping you from doing your job?\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn color=\"secondary\" onClick={this.toggle}>No</MDBBtn>\n            <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Yes</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Standup;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\nimport Modal from './Modal'\n\nclass DOD extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      definition: '',\n      definitions: [],\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      definition: ''\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.definition.length) {\n      return;\n    }\n    const newItem = {\n      definition: this.state.definition,\n      projectID: this.props.projectID\n    };\n\n    const definitionsRef = firebaseApp.database().ref('dod');\n    definitionsRef.push(newItem);\n\n    this.setState(state => ({\n      definition: ''\n    }));\n    this.toggle();\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.definition.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/dod/${itemId}`);\n    itemRef.update({definition: this.state.definition});\n\n    this.edit_toggle();\n  }\n\n  componentDidMount() {\n    const definitionsRef = firebaseApp.database().ref('dod');\n    definitionsRef.on('value', (snapshot) => {\n      let definitionList = snapshot.val();\n      let newState = [];\n      for (let definition in definitionList) {\n        newState.push({\n          id: definition,\n          definition: definitionList[definition].definition,\n          projectID: definitionList[definition].projectID\n        });\n      }\n      this.setState({\n        definitions: newState\n      });\n    });\n  }\n\n  removeDOD(itemId) {\n    const itemRef = firebaseApp.database().ref(`/dod/${itemId}`);\n    itemRef.remove();\n  }\n\n  updateDOD(itemId) {\n    const itemRef = firebaseApp.database().ref(`/dod/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      if (snapshot && snapshot.exists()) {\n        let definition = snapshot.val();\n        this.setState({\n          definition: definition.definition,\n          edit_id: itemId,\n          edit_modal: !this.state.edit_modal\n        });\n      }\n    });\n  }\n\n\n  render () {\n    var definitions = [];\n    this.state.definitions.forEach ((d) => {\n      if (this.props.projectID === d.projectID) {\n        definitions.push(d);\n      }\n    });\n\n    return (\n    <React.Fragment>\n      <MDBContainer>\n      <MDBCard className=\"card\">\n      <MDBCardBody>\n      <MDBCardTitle>Definitions of Done</MDBCardTitle>\n      <MDBBtn color=\"primary\" size=\"sm\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New DOD</MDBBtn>\n      { definitions.length === 0 ? <div className=\"emptyTitleM\">Looks like you have no definitions of done try creating a new one.</div> : null }\n      {definitions.map(definition => (\n        <MDBCard key={definition.id} className=\"card\">\n        <MDBCardBody>\n        {definition.definition} \n        <MDBBtn className=\"editTask\" color=\"indigo\" size=\"sm\" onClick={()=>{this.updateDOD(definition.id)}}><i className=\"fas fa-edit\"></i></MDBBtn>\n        <MDBBtn className=\"deleteTask\" color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeDOD(definition.id)} }>×</MDBBtn>\n        </MDBCardBody>\n        </MDBCard>\n      ))}\n      </MDBCardBody>\n      </MDBCard>\n      </MDBContainer>\n      <Modal\n        title=\"Enter New Definition of Done\"\n        button_title=\"Submit\"\n        modal_message=\"Here is where you will define the general criteria that makes a user story or final product ready to be delivered.\"\n        input_name=\"definition\"\n        input_label=\"Definition of Done\"\n        handleInput={this.handleInput}\n        input_value={this.state.definition}\n        toggle={this.toggle}\n        modal={this.state.modal}\n        handleSubmit={this.handleSubmit}\n      />\n      <Modal\n        title=\"Editing Definition of Done\"\n        button_title=\"Update\"\n        input_name=\"definition\"\n        input_label=\"Definition of Done\"\n        handleInput={this.handleInput}\n        input_value={this.state.definition}\n        toggle={this.edit_toggle}\n        modal={this.state.edit_modal}\n        handleEdit={this.handleEdit}\n        status=\"edit\"\n        edit_id={this.state.edit_id}\n      />\n    </React.Fragment>\n    );\n  }\n}\n\nexport default DOD;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport Rows from './Rows';\nimport Goals from './Goals';\nimport Sprints from './Sprints';\nimport Releases from './Releases';\nimport DOR from './DOR';\nimport Standup from './Standup';\nimport DOD from './DOD';\nimport firebaseApp from './firebaseApp';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      storyName: '',\n      userstories: [],\n      countDownDate: new Date().getTime()\n    }\n  }\n    \n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  resetTimer = () => {\n    this.setState({\n      countDownDate: new Date().getTime()\n    });\n  }\n\n  handleInput = (input) => {\n    this.setState({\n      storyName: input\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.storyName.length) {\n      return;\n    }\n    const newItem = {\n      storyName: this.state.storyName,\n      projectName: this.props.project.projectName,\n      id: Date.now(),\n    };\n\n    const storiesRef = firebaseApp.database().ref('userstories');\n    storiesRef.push(newItem);\n\n    this.setState(state => ({\n      storyName: ''\n    }));\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const storiesRef = firebaseApp.database().ref('userstories');\n    storiesRef.on('value', (snapshot) => {\n      let stories = snapshot.val();\n      let newState = [];\n      for (let story in stories) {\n        newState.push({\n          idd: story,\n          id: stories[story].id,\n          projectName: stories[story].projectName,\n          storyName: stories[story].storyName\n        });\n      }\n      this.setState({\n        userstories: newState\n      });\n    });\n  }\n\n  render () {\n    var projectStory = []\n\n    this.state.userstories.forEach( (s)=> {\n      if (s.projectName === this.props.project.projectName) {\n        projectStory.push(s);\n      }\n    });\n\n    return (\n      <React.Fragment>\n        <MDBContainer><MDBRow className=\"d-flex justify-content-center heading\"><div className=\"chalk\">{this.props.project.projectName}</div> <MDBBtn className=\"closing\" color=\"warning\" size=\"md\" onClick={this.props.toggler}>Close</MDBBtn>\n        </MDBRow></MDBContainer>\n        <Standup projectID={this.props.project.idd} />\n        <div className=\"m-5 break\"></div>\n        <MDBRow>\n        <MDBCol md=\"4\"><Goals projectID={this.props.project.idd} /></MDBCol>\n        <MDBCol md=\"4\"><DOR projectID={this.props.project.idd} /></MDBCol>\n        <MDBCol md=\"4\"><DOD projectID={this.props.project.idd} /></MDBCol>\n        <MDBCol md=\"12\"><div className=\"m-5 break\"></div></MDBCol>\n        <MDBCol md=\"12\"><h3 className=\"backlog\">Release Plans</h3></MDBCol>\n        <MDBCol md=\"12\"><Releases user={this.props.user} projectID={this.props.project.idd} userstories={projectStory} /></MDBCol>\n        </MDBRow>\n        <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered>\n          <MDBModalHeader toggle={this.toggle}>Create New User Story</MDBModalHeader>\n          <MDBModalBody>\n            <MDBInput type=\"text\" label=\"As a {user role} I want to...\" getValue={this.handleInput} outline/>\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n            <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Submit</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Table;","import React from \"react\";\nimport './index.css';\nimport stand from './assets/standup.gif';\nimport { MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBCol, MDBContainer, MDBRow, MDBFooter, MDBBtn } from \"mdbreact\";\nimport firebaseApp from './firebaseApp';\n\nclass CountDown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: null,\n      hours: null,\n      minutes: null,\n      seconds: null,\n      countDownDate: null,\n      countDownDateID: null\n    };\n  }\n\n  componentDidMount() {\n    const standupsRef = firebaseApp.database().ref('standupdates');\n    standupsRef.on('value', (snapshot) => {\n      let standups = snapshot.val();\n      for (let standup in standups) {\n        if (standups[standup].projectID === this.props.projectID) {\n          this.setState({\n            countDownDate: standups[standup].standupdate,\n            countDownDateID: standup\n          });\n        }\n      }\n    });\n    this.interval = setInterval(() => {\n      var now = new Date().getTime();   \n      // Find the distance between now and the count down date\n      var distance = now-this.state.countDownDate; \n      // Time calculations for days, hours, minutes and seconds\n      var daysN = Math.floor(distance / (1000 * 60 * 60 * 24));\n      var hoursN = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      var minutesN = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      var secondsN = Math.floor((distance % (1000 * 60)) / 1000);\n\n      this.setState({\n        days: daysN,\n        hours: hoursN,\n        minutes: minutesN,\n        seconds: secondsN\n      });\n    }, 1000);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  \n  render() {\n    return (\n      <div className=\"projectTimer\">\n        { this.state.countDownDate ?\n          <div className=\"standtimer\"><img src={stand} className=\"standgif3\" /> {this.state.days}Days {this.state.hours}Hrs {this.state.minutes}Mns {this.state.seconds}Sec </div>\n          : null}\n      </div>\n    )\n  }\n}\n\nexport default CountDown;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport firebaseApp from './firebaseApp';\n\nclass SharedUsers extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sharedUsers: []\n    }\n  }\n\n  componentDidMount() {\n    const sharedUsersRef = firebaseApp.database().ref('sharedusers');\n    sharedUsersRef.on('value', (snapshot) => {\n      let sharedUsersList = snapshot.val();\n      let newState = [];\n      for (let sharedUser in sharedUsersList) {\n        newState.push({\n          id: sharedUser,\n          sharedUser: sharedUsersList[sharedUser].sharedUser,\n          projectID: sharedUsersList[sharedUser].projectID\n        });\n      }\n      this.setState({\n        sharedUsers: newState\n      });\n    });\n  }\n\n  removeSharedUser(itemId) {\n    const itemRef = firebaseApp.database().ref(`/sharedusers/${itemId}`);\n    itemRef.remove();\n  }\n\n\n  render () {\n    var sharedUsers = [];\n    this.state.sharedUsers.forEach ((u) => {\n      if (this.props.projectID === u.projectID) {\n        sharedUsers.push(u);\n      }\n    });\n\n    return (\n      <React.Fragment>\n      { sharedUsers.length !== 0 ? <h6>Users who have access:</h6> : null }\n      {sharedUsers.map(sharedUser => (\n        <MDBCard key={sharedUser.id} className=\"card\">\n        <MDBCardBody>\n        <MDBCardText>{sharedUser.sharedUser} <MDBBtn color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeSharedUser(sharedUser.id)} }>Remove Access</MDBBtn></MDBCardText>\n        </MDBCardBody>\n        </MDBCard>\n      ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SharedUsers;","import React from 'react';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport Table from './Table';\nimport Countdown from './Countdown';\nimport SharedUsers from './SharedUsers';\nimport firebaseApp from './firebaseApp';\nimport Modal from './Modal';\n\nclass Project extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      showResults: false,\n      sharedUser: '',\n      selectedProject: '',\n      sharedUsers: [],\n      toggledProject: [],\n      edit_modal: false,\n      edit_id: ''\n    }\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  shareModal = (proj) => {\n    this.setState({\n      modal: !this.state.modal,\n      selectedProject: proj\n    });\n  }\n\n  edit_toggle = () => {\n    this.setState({\n      edit_modal: !this.state.edit_modal,\n      selectedProject: ''\n    });\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.sharedUser.length) {\n      return;\n    }\n    const newItem = {\n      sharedUser: this.state.sharedUser,\n      projectID: this.state.selectedProject\n    };\n\n    const usersRef = firebaseApp.database().ref('sharedusers');\n    usersRef.push(newItem);\n\n    this.setState(state => ({\n      sharedUser: ''\n    }));\n  }\n\n  handleEdit = (itemId) => {\n    if (!this.state.selectedProject.length) {\n      return;\n    }\n\n    const itemRef = firebaseApp.database().ref(`/projects/${itemId}`);\n    itemRef.update({projectName: this.state.selectedProject});\n\n    this.edit_toggle();\n  }\n\n  componentDidMount() {\n    const usersRef = firebaseApp.database().ref('sharedusers');\n    usersRef.on('value', (snapshot) => {\n      let users = snapshot.val();\n      let newState = [];\n      for (let user in users) {\n        newState.push({\n          id: user,\n          projectID: users[user].projectID,\n          sharedUser: users[user].sharedUser\n        });\n      }\n      this.setState({\n        sharedUsers: newState\n      });\n    });\n  }\n    \n  removeProject(itemId) {\n    const itemRef = firebaseApp.database().ref(`/projects/${itemId}`);\n    itemRef.remove();\n  }\n\n  updateProject(itemId) {\n    const itemRef = firebaseApp.database().ref(`/projects/${itemId}`);\n    itemRef.on('value', (snapshot) => {\n      let proj = snapshot.val();\n      this.setState({\n        selectedProject: proj.projectName,\n        edit_id: itemId,\n        edit_modal: !this.state.edit_modal\n      });\n    });\n  }\n\n  openProject = (project) => {\n    this.setState({\n      showResults: true,\n      toggledProject: project\n    });\n    this.props.toggler();\n  }\n\n  closeProject = () => {\n    this.setState({\n      showResults: false,\n      toggledProject: []\n    });\n    this.props.toggler();\n  }\n\n  open = (projectName) => {\n    return <Table name={projectName} />;\n  }\n\n  render () {\n    var projects = []\n    var sharedProjects = []\n\n    this.props.projects.forEach( (p)=> {\n      if (p.userID === firebaseApp.auth().currentUser.uid) {\n        projects.push(p);\n      }\n      this.state.sharedUsers.forEach( (u)=> {\n        if (u.projectID === p.idd && u.sharedUser === firebaseApp.auth().currentUser.email) {\n          sharedProjects.push(p);\n        }\n      });\n    });\n\n    return (\n      <React.Fragment>\n        { this.state.showResults ? <Table user={this.props.user} toggler={this.closeProject} project={this.state.toggledProject} /> : null }\n      <MDBContainer>\n        { projects.length === 0 ? <h3 className=\"emptyTitle\">Looks like you have no projects try creating a new one.</h3> : null }\n        { this.state.showResults ? null : <div className=\"m-5\"><h4>Your Projects</h4><div className=\"break\"></div></div> }\n        { this.state.showResults ? null :\n          projects.map(project => (\n            <MDBCard key={project.id} className=\"card\">\n            <MDBCardBody>\n            <MDBRow>\n            <MDBCol md=\"6\">\n            <MDBCardTitle>Project: {project.projectName}</MDBCardTitle>\n            <MDBCardText>\n              <MDBBtn color=\"info\" size=\"sm\" onClick={() => this.openProject(project)}>Open</MDBBtn>\n              <MDBBtn color=\"secondary\" size=\"sm\" onClick={() => this.shareModal(project.idd)} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-user-plus hvr-icon\"></i> Share</MDBBtn>\n              <MDBBtn color=\"indigo\" size=\"sm\" onClick={()=>{this.updateProject(project.idd)}} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-edit hvr-icon\"></i> Edit</MDBBtn>\n              <MDBBtn color=\"danger\" size=\"sm\" onClick={() => { if (window.confirm(\"Are you sure you want to delete this permantly?\")) this.removeProject(project.idd)} }>Delete</MDBBtn>\n            </MDBCardText>\n            </MDBCol>\n            <MDBCol md=\"2\">\n            </MDBCol>\n            <MDBCol md=\"4\">\n            <Countdown projectID={project.idd} />\n            </MDBCol>\n            </MDBRow>\n            </MDBCardBody>\n            </MDBCard>\n          ))\n        }\n        { this.state.showResults ? null : <div className=\"m-5\"><h4>Projects Shared with You</h4><div className=\"break\"></div></div> }\n        { this.state.showResults ? null :\n          sharedProjects.map(project => (\n            <MDBCard key={project.id} className=\"card\">\n            <MDBCardBody>\n            <MDBCardTitle>Project: {project.projectName}</MDBCardTitle>\n            <MDBCardText>\n              <MDBBtn color=\"info\" size=\"sm\" onClick={() => this.openProject(project)}>Open</MDBBtn>\n            </MDBCardText>\n            </MDBCardBody>\n            </MDBCard>\n          ))\n        }\n        <Modal\n          title=\"Editing Project\"\n          button_title=\"Update\"\n          input_name=\"selectedProject\"\n          input_label=\"Project Name\"\n          handleInput={this.handleInput}\n          input_value={this.state.selectedProject}\n          toggle={this.edit_toggle}\n          modal={this.state.edit_modal}\n          handleEdit={this.handleEdit}\n          status=\"edit\"\n          edit_id={this.state.edit_id}\n        />\n\n        <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered scrollable>\n          <MDBModalHeader toggle={this.toggle}>Share Project Access</MDBModalHeader>\n          <MDBModalBody>\n            <MDBInput type=\"text\" name=\"sharedUser\" label=\"enter email to share\" onChange={this.handleInput} background outline/>\n            <SharedUsers projectID={this.state.selectedProject} />\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n            <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Submit</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </MDBContainer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Project;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\nimport './index.css';\nimport './hover-min.css';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport Project from './Project';\nimport * as serviceWorker from './serviceWorker';\nimport withFirebaseAuth from 'react-with-firebase-auth';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseApp from './firebaseApp';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport scrum1 from './assets/scrum1.png';\nimport scrum from './assets/scrum.svg';\nimport scrum2 from './assets/scrum2.png';\nimport scrum3 from './assets/scrum3.png';\nimport scrum4 from './assets/scrum4.png';\nimport scrum5 from './assets/scrum5.png';\nimport scrum6 from './assets/scrum6.png';\nimport scrum7 from './assets/scrum7.png';\nimport scrum8 from './assets/scrum8.png';\nimport stand from './assets/standup.gif';\n\nclass ProjectList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      projectName: '',\n      projects: [],\n      projectToggled: true\n    }\n    this.toggle = this.toggle.bind(this);\n  }\n    \n\n  toggle () {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  projtoggle = () => {\n    this.setState({\n      projectToggled: !this.state.projectToggled\n    });\n  }\n\n  handleInput = (input) => {\n    this.setState({\n      projectName: input\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.projectName.length) {\n      return;\n    }\n    const newItem = {\n      projectName: this.state.projectName,\n      id: Date.now(),\n      userID: firebaseApp.auth().currentUser.uid,\n    };\n\n    const projectsRef = firebaseApp.database().ref('projects');\n    projectsRef.push(newItem);\n\n    this.setState(state => ({\n      projectName: ''\n    }));\n    this.toggle();\n  }\n\n  componentDidMount() {\n    const projectsRef = firebaseApp.database().ref('projects');\n    projectsRef.on('value', (snapshot) => {\n      let projects = snapshot.val();\n      let newState = [];\n      for (let project in projects) {\n        newState.push({\n          idd: project,\n          id: projects[project].id,\n          projectName: projects[project].projectName,\n          userID: projects[project].userID\n        });\n      }\n      this.setState({\n        projects: newState\n      });\n    });\n  }\n\n  render () {\n    const {\n      user,\n      signOut,\n      signInWithGoogle,\n      loading,\n    } = this.props;\n    var signUp = <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebaseApp.auth()}/>;\n\n    return (\n      <React.Fragment>\n        <Navbar user={this.props.user} signOut={this.props.signOut} signUp={signUp} signInWithGoogle={this.props.signInWithGoogle}/>\n        {\n          (user && this.state.projectToggled)\n            ? <React.Fragment>\n              <h1 className=\"heading chalk\">Scrum Planning<br/>Made Simple (ßeta...)</h1>\n              <h3 className=\"welcomeUser\">Welcome {user.displayName}</h3>\n              <h4 className=\"text-center\"><MDBBtn color=\"primary\" size=\"lg\" id=\"projectbtn\" onClick={this.toggle} className=\"hvr-icon-pulse-grow\"><i className=\"fas fa-plus hvr-icon\"></i> New Project</MDBBtn></h4>\n              </React.Fragment>\n            : null\n        }\n        { user ? \n          <Project user={this.props.user} toggler={this.projtoggle} projects={this.state.projects} />\n          : <React.Fragment>\n            <MDBContainer>\n            <h1 className=\"heading chalk\">Scrum Planning<br/>Made Simple (ßeta...)</h1>\n            <h2 className=\"heading\">Please login above to use our beautiful services.</h2>\n            <h2 className=\"scrumheading\">Join</h2><img src={scrum1} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">Now</h2><img src={scrum2} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">To</h2><img src={scrum3} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">Get</h2><img src={scrum4} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">Your</h2><img src={scrum5} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">Scrum</h2><img src={scrum6} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">Plan</h2><img src={scrum7} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            <h2 className=\"scrumheading\">Done</h2><img src={scrum8} className=\"img-fluid\" loading=\"lazy\" alt=\"...\" />\n            </MDBContainer>\n            </React.Fragment> }\n        <Footer />\n\n        <MDBModal isOpen={this.state.modal} toggle={this.toggle} centered>\n          <MDBModalHeader toggle={this.toggle}>Create a New Project</MDBModalHeader>\n          <MDBModalBody>\n            First step is to give your project a name.\n            <MDBInput type=\"text\" label=\"Project Name\" getValue={this.handleInput} background outline/>\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn color=\"secondary\" onClick={this.toggle}>Close</MDBBtn>\n            <MDBBtn color=\"primary\" onClick={this.handleSubmit}>Submit</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </React.Fragment>\n    );\n  }\n}\n\nconst firebaseAppAuth = firebaseApp.auth();\n \n/** See the signature above to find out the available providers */\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  //signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\n  ]\n};\n\nfirebaseApp.auth().onAuthStateChanged((user) => {\n  if (user) {\n    console.log(user.uid);\n  } else {\n  }\n});\n\n/** Wrap it */\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(ProjectList);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ProjectList from './ProjectList';\n\n\n\nReactDOM.render(<ProjectList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/standup.8ea64ebc.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.f02b696b.svg\";","module.exports = __webpack_public_path__ + \"static/media/scrum1.0dcfbf99.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum2.a5491242.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum3.a5558da4.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum4.1ac3c2c6.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum5.4b202515.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum6.c376b385.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum7.508fbb48.png\";","module.exports = __webpack_public_path__ + \"static/media/scrum8.4aa642b1.png\";"],"sourceRoot":""}